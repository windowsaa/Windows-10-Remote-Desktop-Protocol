name: Windows 10 REMOTE DESKTOP PROTOCOL

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Disable Password Complexity Policy
        run: |
          secedit /export /cfg "$env:TEMP\secpol.cfg"
          (Get-Content "$env:TEMP\secpol.cfg") -replace "PasswordComplexity = 1", "PasswordComplexity = 0" `
                                               -replace "MinimumPasswordLength = 8", "MinimumPasswordLength = 1" |
            Set-Content "$env:TEMP\secpol.cfg"
          secedit /configure /db secedit.sdb /cfg "$env:TEMP\secpol.cfg" /areas SECURITYPOLICY

      - name: Create Users with Easy Passwords
        run: |
          $users = @{
              "runneradmin" = "12345678"
              "installer"   = "87654321"
              "RDP"         = "0987654321"
          }

          foreach ($user in $users.Keys) {
              $securePass = ConvertTo-SecureString $users[$user] -AsPlainText -Force
              if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
                  New-LocalUser -Name $user -Password $securePass -AccountNeverExpires
              } else {
                  Set-LocalUser -Name $user -Password $securePass
              }
          }

          $groups = @("Administrators", "Remote Desktop Users")
          foreach ($group in $groups) {
              foreach ($user in $users.Keys) {
                  $alreadyInGroup = Get-LocalGroupMember -Group $group | Where-Object { $_.Name -like "*\$user" }
                  if (-not $alreadyInGroup) {
                      Add-LocalGroupMember -Group $group -Member $user
                  }
              }
          }

          echo "RDP_CREDS=runneradmin: 12345678 | installer: 87654321 | RDP: 0987654321" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: runneradmin | Password: 12345678"
          Write-Host "Username: installer   | Password: 87654321"
          Write-Host "Username: RDP         | Password: 0987654321"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
